// Generated by CoffeeScript 1.4.0
var KeyboardEvents, World, update, world,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

KeyboardEvents = {
  bind: function(websocket) {
    window.onkeydown = function(e) {
      return websocket.send(JSON.stringify({
        event: "keydown",
        keycode: e.keyCode
      }));
    };
    return window.onkeyup = function(e) {
      return websocket.send(JSON.stringify({
        event: "keyup",
        keycode: e.keyCode
      }));
    };
  }
};

update = {
  members: [
    {
      id: 'abc',
      texture: 'south2.png',
      anchor_x: 0.5,
      anchor_y: 0.5,
      position_x: 10,
      position_y: 10
    }
  ]
};

World = (function() {

  function World(options) {
    this.render = __bind(this.render, this);
    this.stage = new PIXI.Stage(0xFFFFFF);
    this.renderer = PIXI.autoDetectRenderer(1000, 600);
    this.members = {};
    document.body.appendChild(this.renderer.view);
  }

  World.prototype.connect = function() {
    var _this = this;
    this.websocket = new WebSocket("ws://" + window.location.host + "/websocket");
    return this.websocket.onmessage = function(e) {
      var world;
      world = JSON.parse(e.data);
      return _this.update(world);
    };
  };

  World.prototype.update = function(update) {
    var id, ids, member, sprite, _i, _len, _ref, _ref1, _results;
    ids = _.map(update.members, function(m) {
      return m.id;
    });
    _ref = this.members;
    for (id in _ref) {
      member = _ref[id];
      if (ids.indexOf(id) === -1) {
        this.stage.removeChild(member.sprite);
        delete this.members[id];
      }
    }
    _ref1 = update.members;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      member = _ref1[_i];
      if (this.members[member.id]) {
        sprite = this.members[member.id].sprite;
        sprite.position.x = member.position_x;
        _results.push(sprite.position.y = member.position_y);
      } else {
        sprite = new PIXI.Sprite(PIXI.Texture.fromImage(member.texture));
        sprite.anchor.x = member.anchor_x;
        sprite.anchor.y = member.anchor_y;
        sprite.position.x = member.position_x;
        sprite.position.y = member.position_y;
        this.stage.addChild(sprite);
        member.sprite = sprite;
        _results.push(this.members[member.id] = member);
      }
    }
    return _results;
  };

  World.prototype.render = function(elapsed) {
    requestAnimFrame(this.render);
    return this.renderer.render(this.stage);
  };

  return World;

})();

world = new World();

world.connect();

world.render();

KeyboardEvents.bind(world.websocket);
