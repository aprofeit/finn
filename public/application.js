// Generated by CoffeeScript 1.4.0
var KeyboardEvents, World, world,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

KeyboardEvents = {
  bind: function(websocket) {
    window.onkeydown = function(e) {
      return websocket.send(JSON.stringify({
        event: "keydown",
        keycode: e.keyCode
      }));
    };
    return window.onkeyup = function(e) {
      return websocket.send(JSON.stringify({
        event: "keyup",
        keycode: e.keyCode
      }));
    };
  }
};

World = (function() {

  function World(options) {
    this.render = __bind(this.render, this);

    var _this = this;
    this.stage = new PIXI.Stage(0xFFFFFF);
    this.renderer = PIXI.autoDetectRenderer(1000, 600);
    this.members = new Backbone.Collection();
    document.body.appendChild(this.renderer.view);
    this.members.on("add", function(player) {
      var sprite;
      sprite = new PIXI.Sprite(PIXI.Texture.fromImage(player.get("texture")));
      sprite.anchor.x = player.get("anchor_x");
      sprite.anchor.y = player.get("anchor_y");
      sprite.position.x = player.get("position_x");
      sprite.position.y = player.get("position_y");
      _this.stage.addChild(sprite);
      return player.sprite = sprite;
    });
    this.members.on("remove", function(player) {
      return _this.stage.removeChild(player.sprite);
    });
    this.members.on("change", function(player) {
      var sprite;
      sprite = player.sprite;
      sprite.position.x = player.get("position_x");
      return sprite.position.y = player.get("position_y");
    });
  }

  World.prototype.connect = function() {
    var _this = this;
    this.websocket = new WebSocket("ws://" + window.location.host + "/websocket");
    return this.websocket.onmessage = function(e) {
      var world;
      world = JSON.parse(e.data);
      return _this.update(world);
    };
  };

  World.prototype.update = function(update) {
    return this.members.set(update.members);
  };

  World.prototype.render = function(elapsed) {
    requestAnimFrame(this.render);
    return this.renderer.render(this.stage);
  };

  return World;

})();

world = new World();

world.connect();

world.render();

KeyboardEvents.bind(world.websocket);
